# -*- coding: utf-8 -*-
"""Homework 1 (DSCI 1302) .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aPYRCPZ-gGgGoQi41wmIbHzJOi8PBKyB

# Question 1
"""

import numpy as np

a = np.array([[0,0,1,0],
              [1,0,0,0],
              [0,1,0,0],
              [0,0,0,1]])
b = np.array([[1],
              [2],
              [3],
              [4]])
c = a.dot(b)
print('The matrix of A ')
print(a)
print('The matrix of B')
print(b)
print('Both A & B')
print(c)

a = np.array([8, 8, 6])
b = np.array([[5, 2],
              [1, 3],
              [6, 5]])
c = a.dot(b)
print('Matrix A')
print(a)
print('Matrix B')
print(b)
print('Both Matrix A & B')
print(c)

a = np.array([[1, 1],[2, 0]])
b = np.array([[0, 2, 3], [1, 1, 2]])
c = a.dot(b)
print('Matrix A')
print(a)
print('Matrix B')
print(b)
print('Matrix A & B')
print(c)

"""# Question 2 """

'''
The benefits of using NumPy :
1 ) Can use mathematical operation
2 ) Less memory to store data 
3) Find element quicker
'''

"""# Question 3

"""

'''
Git Add : Command adds new or changed files 

Git Commit: snapshot of the repo at a specific time 

Git Pull: Uploading local repo content to a remote repository 

Git Push: Transfer commits from local repository to a remote repository 

Git Status: Displays the state of the working directory and the staging area
'''

"""# Question 4

"""

'''
Python types are mutable : 
List 
Dictionary 
'''

"""# Question 5"""

def f (b):
  return a*b
a = 0 

print('f(3) = {}'.format(f(3)))
print('a is {}'.format(a))

def f(b):
   a = 6 
   return a*b

a = 0 
print('f(3) = {}'.format(f(3)))
print('a is {}'.format(a))

"""# Question 6"""

# Exception ArithmeticError
try: 
  a = 10/0
  print(a)
except ArithmeticError:
  print("This statement is raising an arithmetic expection.")
else:
  print("Success")

# Exception LookupError
try:
  a = [1, 2, 3]
  print(a[3])
except LookupError:
  print("Index out of bound error ")
else:
  print("Success")

#Exception SyntaxError
try:
	print (eval('geeks for geeks'))
except SyntaxError, err:
	print ('Syntax error %s (%s-%s): %s' % \
		(err.filename, err.lineno, err.offset, err.text))
	print (err)

"""# Queston 7"""

'''
Numpy Data Types:

Booleans = (bool)

integers =  (int)

unsigned integers = (uint)

single = (float)

csingle = (float complex)
'''

"""# Question 8"""

gArray = np.array([[79., 95., 60.,],
                   [95., 60., 61.],
                   [99., 67., 84.],
                   [76., 76., 97.],
                   [91., 84., 98.],
                   [70., 69., 96.],
                   [88., 65., 76.],
                   [67., 73., 80.],
                   [82., 89., 61.],
                   [94., 67., 88.]
                   ])
print(gArray)
# This printing all the floating numbers in the array

arr = gArray[1:2, 2:3]
print('This gArray[1:2, 2:3]:')
print(arr)
# This slicing between two index from that is between 1 and 2, from 2 and 3
print('\nThis gArray[5:, :1]')
arr = gArray[5:,:1]
print(arr)
# print a row of 5 & 1 
print('\nThis gArray[::5, ::2]')
arr = gArray[::5, ::2]
print(arr)
# separte the end and start of the value between row 5 & 2 
print('\nThis gArray[gArray[:,0]>94]')
arr = gArray[gArray[:,0] > 94]
print(arr)
# This print a row that is greater than 94

"""#Question 9"""

# Five file Mode :
'''
r = open a file for reading 

w = open a file for writing 

b = opens a binary mode 

t = opens in text mode 

x = opens a file for exclusive creation 
'''

"""# Question 10"""

# Questions: 
# Readlines() and readline?

'''
readline: Reads ibe line from the file and return it as a string 

readlines: returns the the content of the entire file as a list of strings 
'''

"""# Question 11"""

'''
Absolute name of Cano Folder: 

Relative pathname of Messi Folder: 
'''

"""# Question 12"""

'{:7.2f}'.format(100.5)

#This mean that the adding a width while placing a limit the number of decimal place