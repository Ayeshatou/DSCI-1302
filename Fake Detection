#Import all the library you need to use 
import numpy as np 
import pandas as pd #<--- reading the csv 
import itertools
import io #<--- using this to properly read the file that is being upload 
import matplotlib.pyplot as plt

# The library to accurately calculate the data
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix#Import all the library you need to use 

from google.colab import files
data = files.upload()

#read the data 
df = pd.read_csv(io.StringIO(data['news.csv'].decode('utf-8')))
# Get the shape and head 
df.shape
df.head()

#Get the lable for the data
label = df.label 
label.head
# Not changing this one |:[

#Split the dataset 
x_train, x_test, y_train, y_test = train_test_split(df['text'], label , test_size = 0.3, random_state = 8)
#Initialize the TfidVectorizer 
tfidf_vectorizer = TfidfVectorizer(stop_words ='english', max_df = 0.7)
#Fit and transform train set & test set 
tfidf_train = tfidf_vectorizer.fit_transform(x_train)
tfidf_test = tfidf_vectorizer.transform(x_test)

score0 = []
#Initaliaze a Passive Agressive Classifier 
pac = PassiveAggressiveClassifier(max_iter = 50)
pac.fit(tfidf_train, y_train)

#Predict on the test set and calculate accuracy 
y_pred = pac.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f'Accuracy: {round(score * 100,2)}%')

#Build Confusion Matrix
confusion_matrix(y_test, y_pred, labels= ['FAKE', 'REAL'])

pac_1 = PassiveAggressiveClassifier(max_iter = 60)
pac_1.fit(tfidf_train, y_train)
y = pac_1.predict(tfidf_test)
score2 = accuracy_score(y_test, y)

pac_2 = PassiveAggressiveClassifier(max_iter = 40)
pac_2.fit(tfidf_train, y_train)
y = pac_2.predict(tfidf_test)
score3 = accuracy_score(y_test, y)

pac_3 = PassiveAggressiveClassifier(max_iter = 30)
pac_3.fit(tfidf_train,y_train)
y = pac_3.predict(tfidf_test)
score4 = accuracy_score(y_test, y)

score0.append(score)
score0.append(score2)
score0.append(score3)
score0.append(score4)
#Y-axis of the label 
s = np.array([score,score2,score3,score4]) #<--- change that variable (Already change)

n = np.array([50, 60, 40, 90]) #<--- the x-axis of the lable 
t = plt.figure()
xd = t.add_axes([0,0,1,1]) #<-- putting this into a dimension. 
xd.bar(n,s) #<-- printing this specific bar 
plt.title("Accuracy of the Graph")
